<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>Ground Station — Telemetry + Control</title>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" crossorigin>
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" crossorigin></script>
<style>
  :root{--bg:#f5f5f7;--card:#fff;--text:#111;--muted:#666;--accent:#0b5;--danger:#d33;--border:#e5e5ea}
  html,body{height:100%} body{margin:0;background:var(--bg);color:var(--text);font-family:Helvetica,Arial,sans-serif}
  .wrap{max-width:1200px;margin:auto;padding:20px}
  .toolbar{display:flex;gap:10px;align-items:center;flex-wrap:wrap;margin-bottom:16px}
  .btn{background:var(--text);color:#fff;border:none;padding:10px 14px;border-radius:10px;cursor:pointer}
  .btn.secondary{background:#fff;color:var(--text);border:1px solid var(--border)}
  select,input{padding:10px;border-radius:10px;border:1px solid var(--border);background:#fff}
  .status-dot{width:10px;height:10px;border-radius:50%;background:var(--danger);display:inline-block;margin-left:6px}
  .status.online{background:var(--accent)}
  .grid{display:grid;grid-template-columns: 1fr 1fr; gap:16px}
  .card{background:var(--card);border-radius:14px;box-shadow:0 8px 24px rgba(0,0,0,.06);padding:16px;overflow:hidden}
  h2{font-size:18px;margin:0 0 10px}
  #raw{height:220px;background:#0a0a0a;color:#e5e5e5;font-family:ui-monospace,Menlo,Consolas,monospace;padding:12px;border-radius:12px;overflow:auto;white-space:pre-wrap;border:1px solid #222}
  table{width:100%;border-collapse:collapse;font-size:14px}
  th,td{padding:8px 10px;border-bottom:1px solid var(--border);text-align:left}
  th{color:var(--muted);font-weight:600;background:#fafafa;position:sticky;top:0}
  #map{height:420px;border-radius:12px}
  .pill{font-size:12px;color:#fff;background:var(--muted);padding:3px 8px;border-radius:999px;margin-left:6px}
  .ok{background:var(--accent)} .bad{background:#c33} .muted{color:var(--muted)}
  .controls{display:flex;gap:8px;flex-wrap:wrap}
</style>
</head>
<body>
<div class="wrap">
  <div class="toolbar">
    <button id="connectBtn" class="btn">Connect</button>
    <button id="disconnectBtn" class="btn secondary" disabled>Disconnect</button>
    <label>Baud
      <select id="baud">
        <option selected>9600</option>
        <option>19200</option><option>38400</option>
        <option>57600</option><option>115200</option>
        <option>230400</option><option>460800</option>
      </select>
    </label>
    <span class="muted">Status <span id="dot" class="status-dot"></span></span>
    <span id="lineCount" class="muted"></span>
    <button id="clearBtn" class="btn secondary">Clear Log</button>
  </div>

  <div class="controls">
    <button id="btnArm" class="btn secondary" disabled>Arm</button>
    <button id="btnDisarm" class="btn secondary" disabled>Disarm</button>
    <button id="btnResetTime" class="btn secondary" disabled>Reset Time</button>

    <button id="btnLogOn" class="btn secondary" disabled>Log ON</button>
    <button id="btnLogOff" class="btn secondary" disabled>Log OFF</button>
    <button id="btnNewFile" class="btn secondary" disabled>New Log File</button>

    <button id="btnFireServo" class="btn secondary" disabled>Fire Servo</button>
    <label>Angle
      <input id="servoAngle" type="number" value="90" min="0" max="180" style="width:80px"/>
      <button id="btnSetAngle" class="btn secondary" disabled>Set Servo</button>
    </label>

    <button id="btnBuzzerOn" class="btn secondary" disabled>Buzzer ON</button>
    <button id="btnBuzzerOff" class="btn secondary" disabled>Buzzer OFF</button>

    <button id="btnAutoOn" class="btn secondary" disabled>AutoDeploy ON</button>
    <button id="btnAutoOff" class="btn secondary" disabled>AutoDeploy OFF</button>
  </div>

  <div class="grid" style="margin-top:12px">
    <div class="card">
      <h2>Raw Data <span id="streamState" class="pill">idle</span></h2>
      <div id="raw"></div>
    </div>

    <div class="card">
      <h2>Parsed (Variable / Value)</h2>
      <table id="kvTable">
        <thead><tr><th>Variable</th><th>Value</th></tr></thead>
        <tbody id="kvBody"></tbody>
      </table>
    </div>

    <div class="card" style="grid-column:1 / -1">
      <h2>Live Map <span id="fixPill" class="pill">no fix</span></h2>
      <div id="map"></div>
    </div>
  </div>
</div>

<script>
(() => {
  // --- UI refs ---
  const connectBtn = document.getElementById('connectBtn');
  const disconnectBtn = document.getElementById('disconnectBtn');
  const clearBtn = document.getElementById('clearBtn');
  const baudSel = document.getElementById('baud');
  const dot = document.getElementById('dot');
  const rawDiv = document.getElementById('raw');
  const streamState = document.getElementById('streamState');
  const lineCountEl = document.getElementById('lineCount');
  const kvBody = document.getElementById('kvBody');
  const fixPill = document.getElementById('fixPill');

  // Control buttons
  const btnArm = document.getElementById('btnArm');
  const btnDisarm = document.getElementById('btnDisarm');
  const btnResetTime = document.getElementById('btnResetTime');
  const btnLogOn = document.getElementById('btnLogOn');
  const btnLogOff = document.getElementById('btnLogOff');
  const btnNewFile = document.getElementById('btnNewFile');
  const btnFireServo = document.getElementById('btnFireServo');
  const servoAngle = document.getElementById('servoAngle');
  const btnSetAngle = document.getElementById('btnSetAngle');
  const btnBuzzerOn = document.getElementById('btnBuzzerOn');
  const btnBuzzerOff = document.getElementById('btnBuzzerOff');
  const btnAutoOn = document.getElementById('btnAutoOn');
  const btnAutoOff = document.getElementById('btnAutoOff');

  let port, reader, writer, decoder, lineStream, inputDone;
  let linesShown = 0;
  const MAX_RAW_CHARS = 40000;

  // Default headers (match transmitter, incl. SD fields)
  const defaultHeaders = [
    "TimeSeconds",
    "AccelerationX_mps2","AccelerationY_mps2","AccelerationZ_mps2","AccelerationMagnitude_mps2","GForce_g",
    "GyroX_dps","GyroY_dps","GyroZ_dps","IMUTemperature_C",
    "Pressure_Pa","BMPTemperature_C","Altitude_m","VerticalSpeed_mps","MaxAltitude_m",
    "GPSAltitude_m","Latitude_deg","Longitude_deg","SpeedOverGround_mps","Course_deg","HDOP","Satellites","GPSDateTime_UTC",
    "Voltage_V","BatteryPercent","FreeHeap_bytes",
    "Status","PacketCount","ServoAngle_deg","BuzzerOn",
    "SDEnabled","SDEntries","SDFile"
  ];
  const canonicalSet = new Set(defaultHeaders);

  let headers = [...defaultHeaders];
  let valueCells = {};
  buildKVTable(headers);

  function buildKVTable(hs){
    kvBody.innerHTML = ''; valueCells = {};
    hs.forEach(h=>{
      const tr=document.createElement('tr');
      const k=document.createElement('td'); const v=document.createElement('td');
      k.textContent=h; v.textContent='—'; tr.appendChild(k); tr.appendChild(v); kvBody.appendChild(tr);
      valueCells[h]=v;
    });
  }
  function updateKV(values){
    while(values.length < headers.length) values.push('');
    headers.forEach((h,i)=>{ if(valueCells[h]) valueCells[h].textContent = (values[i] ?? '').trim(); });
  }

  function appendRaw(t){
    rawDiv.textContent += t;
    if (rawDiv.textContent.length > MAX_RAW_CHARS)
      rawDiv.textContent = rawDiv.textContent.slice(-Math.floor(MAX_RAW_CHARS*0.9));
    rawDiv.scrollTop = rawDiv.scrollHeight;
  }
  function setOnline(on){ dot.classList.toggle('status', on); }
  function setStream(s){ streamState.textContent=s; streamState.classList.toggle('ok',s==='reading'); streamState.classList.toggle('bad',s==='error'); if(s==='idle'){streamState.classList.remove('ok','bad');}}
  function parseCSV(line){ return line.split(',').map(s=>s.trim()); }

  function isCanonicalHeader(line){
    const hs = parseCSV(line);
    const matches = hs.filter(h => canonicalSet.has(h)).length;
    return matches >= 6;
  }

  // Map
  const map = L.map('map',{zoomControl:true}).setView([-37.787,175.279],12);
  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',{maxZoom:19,attribution:'© OpenStreetMap'}).addTo(map);
  let marker=null; let path=L.polyline([], {weight:3, opacity:.9}).addTo(map); let firstFix=false;

  function validLatLon(lat,lon){ if(!isFinite(lat)||!isFinite(lon)) return false; if(lat===0&&lon===0) return false; return lat>=-90&&lat<=90&&lon>=-180&&lon<=180; }
  function updateMapFromValues(vals){
    const latIdx = headers.indexOf("Latitude_deg");  const li = (latIdx>=0)?latIdx:16;
    const lonIdx = headers.indexOf("Longitude_deg"); const lo = (lonIdx>=0)?lonIdx:17;
    const satIdx = headers.indexOf("Satellites");    const si = (satIdx>=0)?satIdx:21;
    const lat=parseFloat(vals[li]); const lon=parseFloat(vals[lo]); const sats=parseInt(vals[si]||'0',10);
    if(validLatLon(lat,lon)){
      fixPill.textContent=`${lat.toFixed(6)}, ${lon.toFixed(6)} (sats: ${isFinite(sats)?sats:'?'})`;
      fixPill.classList.add('ok'); fixPill.classList.remove('bad');
      const ll=[lat,lon];
      if(!marker){ marker=L.marker(ll).addTo(map).bindPopup('Receiver'); } else { marker.setLatLng(ll); }
      path.addLatLng(ll); if(!firstFix){ firstFix=true; map.setView(ll,16); }
    } else { fixPill.textContent='no fix'; fixPill.classList.remove('ok'); fixPill.classList.add('bad'); }
  }

  // Buffered line reader
  class LineBreakTransformer {
    constructor(){ this.container=''; }
    transform(chunk, controller){
      this.container += chunk;
      const lines = this.container.split(/\r\n|[\r\n]/);
      this.container = lines.pop();
      for(const line of lines) controller.enqueue(line);
    }
    flush(controller){ if(this.container) controller.enqueue(this.container); }
  }

  // Serial connect / write / disconnect
  async function connect(){
    if(!('serial' in navigator)){ alert('Web Serial not supported. Use Chrome/Edge over HTTPS.'); return; }
    try{
      const chosen = await navigator.serial.requestPort({});
      await chosen.open({ baudRate: parseInt(baudSel.value,10) });
      port = chosen;

      // Reader
      decoder = new TextDecoderStream();
      inputDone = port.readable.pipeTo(decoder.writable);
      lineStream = decoder.readable.pipeThrough(new TransformStream(new LineBreakTransformer()));
      reader = lineStream.getReader();

      // Writer
      const encoder = new TextEncoderStream();
      encoder.readable.pipeTo(port.writable);
      writer = encoder.writable.getWriter();

      connectBtn.disabled = true; disconnectBtn.disabled = false;
      enableControls(true);
      setOnline(true); setStream('reading'); linesShown=0; lineCountEl.textContent='';

      while(true){
        const {value, done} = await reader.read();
        if(done) break;
        if(value!=null){
          appendRaw(value+'\n');
          if (value.startsWith('#')) continue;        // ignore acks/comments
          if (isCanonicalHeader(value)) { headers = parseCSV(value); buildKVTable(headers); continue; }

          const vals = parseCSV(value);
          if(vals.length===0) continue;
          updateKV(vals);
          updateMapFromValues(vals);
          linesShown++; lineCountEl.textContent = `Lines: ${linesShown}`;
        }
      }
    } catch(e){ console.error(e); setStream('error'); }
    finally { await disconnect(); }
  }

  async function sendLine(s){
    if (!writer) return;
    try { await writer.write(s + "\n"); } catch(e){ console.error(e); }
  }

  async function disconnect(){
    try{
      enableControls(false);
      if (writer){ try{ await writer.close(); }catch{} writer=null; }
      if (reader){ await reader.cancel().catch(()=>{}); reader.releaseLock(); reader=null; }
      if (inputDone){ await inputDone.catch(()=>{}); inputDone=null; }
      if (port){ await port.close().catch(()=>{}); port=null; }
    } finally {
      connectBtn.disabled=false; disconnectBtn.disabled=true; setOnline(false);
      if(streamState.textContent!=='error') setStream('idle');
    }
  }

  function enableControls(on){
    [btnArm,btnDisarm,btnResetTime,btnLogOn,btnLogOff,btnNewFile,
     btnFireServo,btnSetAngle,btnBuzzerOn,btnBuzzerOff,btnAutoOn,btnAutoOff]
     .forEach(el => el.disabled = !on);
  }

  // Events
  connectBtn.addEventListener('click', connect);
  disconnectBtn.addEventListener('click', disconnect);
  clearBtn.addEventListener('click', ()=>{ rawDiv.textContent=''; linesShown=0; lineCountEl.textContent=''; });

  btnArm.addEventListener('click',       ()=> sendLine("CMD:ARM"));
  btnDisarm.addEventListener('click',    ()=> sendLine("CMD:DISARM"));
  btnResetTime.addEventListener('click', ()=> sendLine("CMD:RESET_TIME"));

  btnLogOn.addEventListener('click',     ()=> sendLine("CMD:LOG_ON"));
  btnLogOff.addEventListener('click',    ()=> sendLine("CMD:LOG_OFF"));
  btnNewFile.addEventListener('click',   ()=> sendLine("CMD:NEW_FILE"));   // starts a fresh CSV and enables logging

  btnFireServo.addEventListener('click', ()=> sendLine("CMD:FIRE_SERVO"));
  btnSetAngle.addEventListener('click',  ()=>{
    const a = Math.max(0, Math.min(180, parseInt(servoAngle.value || "90",10)));
    sendLine("CMD:SET_SERVO:" + a);
  });

  btnBuzzerOn.addEventListener('click',  ()=> sendLine("CMD:BUZZER_ON"));
  btnBuzzerOff.addEventListener('click', ()=> sendLine("CMD:BUZZER_OFF"));

  btnAutoOn.addEventListener('click',    ()=> sendLine("CMD:AUTO_DEPLOY_ON"));
  btnAutoOff.addEventListener('click',   ()=> sendLine("CMD:AUTO_DEPLOY_OFF"));
})();
</script>
</body>
</html>
