<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>ðŸš€ Ground Station â€” Telemetry + Control</title>

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" crossorigin>
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" crossorigin></script>

<style>
  /* ===== Layout safety: never overflow horizontally ===== */
  * { box-sizing: border-box; }
  html, body { height:100%; overflow-x:hidden; }

  /* ===== Rocket Controller Theme (dark + neon) ===== */
  :root{
    --bg:#0b0f1a; --panel:#101626; --panel2:#0f1424; --edge:#1b2440;
    --text:#e7eefc; --muted:#9bb0d0; --accent:#00ffc3; --accent2:#30a5ff;
    --danger:#ff4d6d; --warn:#ffb703; --good:#21d07a;
    --grid:linear-gradient(rgba(48,165,255,.08) 1px, transparent 1px),linear-gradient(90deg, rgba(48,165,255,.08) 1px, transparent 1px);
  }
  body{
    margin:0; background:var(--bg); color:var(--text);
    font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial;
    letter-spacing:.2px;
  }
  .wrap{ width:min(1200px, 100% - 24px); margin:0 auto; padding:18px; }

  .titlebar{
    display:flex; align-items:center; justify-content:space-between; gap:12px; margin-bottom:12px;
  }
  .title{display:flex; gap:10px; align-items:center; font-weight:700; letter-spacing:.6px;}
  .badge-dot{width:10px;height:10px;border-radius:999px;background:#394a78;display:inline-block;margin-left:8px}
  .online{background:var(--good)}
  .btn{
    background:linear-gradient(180deg, #233153, #111729);
    border:1px solid #2a3a64; color:var(--text);
    padding:10px 14px; border-radius:10px; cursor:pointer;
    box-shadow:inset 0 0 0 1px rgba(255,255,255,.06);
  }
  .btn:disabled{opacity:.45; cursor:not-allowed}
  .btn.primary{border-color:#2fb591; background:linear-gradient(180deg, #0d2f2a, #0b2622); color:#dffef4}
  .btn.warn{border-color:#8a5a00; background:linear-gradient(180deg,#2a1e00,#201700)}
  .btn.sm{padding:6px 10px; font-size:13px; border-radius:8px}
  .select, .input{
    background:#0e1527; color:var(--text); border:1px solid #2a3a64; border-radius:10px; padding:10px 12px;
  }
  .input.sm{padding:6px 8px; font-size:13px; border-radius:8px}

  /* ===== Responsive grid: left column clamped, right fills ===== */
  .grid{
    display:grid;
    grid-template-columns: clamp(260px, 24vw, 360px) 1fr;
    gap:16px;
    width:100%;
  }
  @media (max-width: 1100px){
    .grid{ grid-template-columns: 1fr; }
    #map{ height:360px; }
  }

  .card{
    background:linear-gradient(var(--panel), var(--panel2));
    border:1px solid var(--edge); border-radius:14px; padding:12px;
    box-shadow:0 10px 30px rgba(0,0,0,.25);
    max-width:100%;
  }
  .card h2{margin:0 0 8px; font-size:14px; color:#d6e3ff; letter-spacing:.4px; text-transform:uppercase}

  /* Compact control rows */
  .controls .row{
    display:grid; grid-template-columns: 1fr auto auto; gap:6px; align-items:center;
    padding:8px; border-radius:10px; border:1px solid #1a2442; background:#0c1324;
    max-width:100%;
  }
  .controls .row + .row{margin-top:6px}
  .label{font-weight:600; font-size:13px;}
  .status{
    font-family:ui-monospace,Menlo,Consolas,monospace; font-size:12px;
    padding:3px 8px; border-radius:999px; border:1px solid #2a3a64; background:#0d1426; color:#cfe2ff;
    min-width:96px; text-align:center; white-space:nowrap; overflow:hidden; text-overflow:ellipsis;
  }
  .status.good{color:#dffef4; border-color:#178e69; background:#0d2f2a}
  .status.warn{color:#ffe7b3; border-color:#8a5a00; background:#2a1e00}
  .status.bad{ color:#ffd6de; border-color:#8e1b32; background:#2a0d17}

  /* telemetry strip */
  .strip{display:grid; grid-template-columns: repeat(7, minmax(0,1fr)); gap:8px; margin-bottom:12px; width:100%;}
  .tile{background:#0d1426; border:1px solid #1a2442; border-radius:12px; padding:8px; min-width:0;}
  .tile .k{font-size:10px; color:#8aa1c9; text-transform:uppercase; letter-spacing:.6px}
  .tile .v{font-family:ui-monospace,Menlo,Consolas,monospace; font-size:15px; margin-top:3px; color:#d6f0ff; overflow:hidden; text-overflow:ellipsis}

  /* Map + Raw + Table must never overflow */
  #map{ height:420px; width:100%; max-width:100%; border:1px solid #1a2442; border-radius:12px; overflow:hidden }
  .leaflet-container{ width:100% !important; }
  #raw{
    height:180px; background:#050912; color:#b8cae9; border:1px solid #1a2442;
    border-radius:12px; padding:8px; overflow:auto; white-space:pre-wrap; font-family:ui-monospace,Menlo,Consolas,monospace;
    max-width:100%;
  }
  table{ width:100%; table-layout:fixed; border-collapse:collapse; font-size:13px; }
  th, td{ padding:8px 10px; border-bottom:1px solid #1a2442; overflow-wrap:anywhere; }
  th{ color:#9bb0d0; text-align:left; position:sticky; top:0; background:#0f1528 }
  th:first-child{ width:55%; } td:first-child{ overflow:hidden; text-overflow:ellipsis; }

  .bggrid{ background-image:var(--grid); background-size:24px 24px; background-position:0 0; border-radius:14px; padding:8px; max-width:100%; }
</style>
</head>
<body>
<div class="wrap">
  <div class="titlebar">
    <div class="title">
      <span style="font-size:20px">ðŸš€ Ground Station</span>
      <span style="font-size:12px;color:#9bb0d0">Serial Telemetry & Controller</span>
    </div>
    <div style="display:flex; gap:8px; align-items:center">
      <button id="connectBtn" class="btn primary">Connect</button>
      <button id="disconnectBtn" class="btn" disabled>Disconnect</button>
      <label style="font-size:12px;color:#9bb0d0">Baud
        <select id="baud" class="select">
          <option selected>9600</option>
          <option>19200</option><option>38400</option>
          <option>57600</option><option>115200</option>
          <option>230400</option><option>460800</option>
        </select>
      </label>
      <span style="font-size:12px;color:#9bb0d0">Link <span id="dot" class="badge-dot"></span></span>
      <span id="lineCount" style="font-size:12px;color:#9bb0d0"></span>
    </div>
  </div>

  <!-- Telemetry strip -->
  <div class="strip">
    <div class="tile"><div class="k">Altitude</div><div id="t_alt" class="v">â€”</div></div>
    <div class="tile"><div class="k">VSpeed</div><div id="t_vspd" class="v">â€”</div></div>
    <div class="tile"><div class="k">Speed</div><div id="t_sog" class="v">â€”</div></div>
    <div class="tile"><div class="k">Sats</div><div id="t_sats" class="v">â€”</div></div>
    <div class="tile"><div class="k">HDOP</div><div id="t_hdop" class="v">â€”</div></div>
    <div class="tile"><div class="k">Battery</div><div id="t_batt" class="v">â€”</div></div>
    <div class="tile"><div class="k">Packet</div><div id="t_pkt" class="v">â€”</div></div>
  </div>

  <div class="grid">
    <!-- LEFT: compact controls -->
    <div>
      <div class="card controls">
        <h2>Safety & Arming</h2>
        <div class="row">
          <div class="label">System Status</div>
          <div id="statusBadge" class="status">â€”</div>
          <div>
            <button id="btnArm" class="btn sm">Arm</button>
            <button id="btnDisarm" class="btn sm warn">Disarm</button>
          </div>
        </div>
        <div class="row">
          <div class="label">Mission Time</div>
          <div class="status" id="timeBadge">t = â€” s</div>
          <div><button id="btnResetTime" class="btn sm">Reset</button></div>
        </div>
      </div>

      <div class="card controls" style="margin-top:10px">
        <h2>Logging & Storage</h2>
        <div class="row">
          <div class="label">Logging</div>
          <div id="logBadge" class="status">OFF</div>
          <div>
            <button id="btnLogOn" class="btn sm">On</button>
            <button id="btnLogOff" class="btn sm warn">Off</button>
          </div>
        </div>
        <div class="row">
          <div class="label">Entries</div>
          <div id="entriesBadge" class="status">0</div>
          <div><button id="btnNewFile" class="btn sm">New File</button></div>
        </div>
        <div class="row">
          <div class="label">Current File</div>
          <div id="fileBadge" class="status" style="max-width:160px; overflow:hidden; text-overflow:ellipsis;">â€”</div>
          <div></div>
        </div>
      </div>

      <div class="card controls" style="margin-top:10px">
        <h2>Actuators</h2>
        <div class="row">
          <div class="label">Recovery Servo</div>
          <div id="servoBadge" class="status">angle â€”Â°</div>
          <div><button id="btnFireServo" class="btn sm">Fire</button></div>
        </div>
        <div class="row">
          <div class="label">Set Servo Angle</div>
          <div><input id="servoAngle" type="number" class="input sm" value="90" min="0" max="180" style="width:80px"></div>
          <div><button id="btnSetAngle" class="btn sm">Set</button></div>
        </div>
        <div class="row">
          <div class="label">Buzzer</div>
          <div id="buzzerBadge" class="status">OFF</div>
          <div>
            <button id="btnBuzzerOn" class="btn sm">On</button>
            <button id="btnBuzzerOff" class="btn sm warn">Off</button>
          </div>
        </div>
      </div>

      <div class="card" style="margin-top:10px">
        <h2>Event Log</h2>
        <div id="ackLog" style="margin-top:6px; max-height:110px; overflow:auto; font-family:ui-monospace,Menlo,Consolas,monospace; background:#0d1426; border:1px solid #1a2442; border-radius:10px; padding:6px"></div>
      </div>
    </div>

    <!-- RIGHT: Map, Raw, Parsed -->
    <div class="bggrid">
      <div class="card">
        <h2>Live Map <span id="fixPill" class="status">no fix</span></h2>
        <div id="map"></div>
      </div>

      <div class="card">
        <h2>Raw Serial</h2>
        <div id="raw"></div>
      </div>

      <div class="card">
        <h2>Parsed (Variable / Value)</h2>
        <table>
          <thead><tr><th>Variable</th><th>Value</th></tr></thead>
          <tbody id="kvBody"></tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<script>
(() => {
  /* ===== DOM refs ===== */
  const connectBtn = document.getElementById('connectBtn');
  const disconnectBtn = document.getElementById('disconnectBtn');
  const baudSel = document.getElementById('baud');
  const dot = document.getElementById('dot');
  const lineCountEl = document.getElementById('lineCount');
  const rawDiv = document.getElementById('raw');
  const kvBody = document.getElementById('kvBody');
  const fixPill = document.getElementById('fixPill');

  // Telemetry strip
  const t_alt  = document.getElementById('t_alt');
  const t_vspd = document.getElementById('t_vspd');
  const t_sog  = document.getElementById('t_sog');
  const t_sats = document.getElementById('t_sats');
  const t_hdop = document.getElementById('t_hdop');
  const t_batt = document.getElementById('t_batt');
  const t_pkt  = document.getElementById('t_pkt');

  // Controls + status badges
  const statusBadge = document.getElementById('statusBadge');
  const timeBadge   = document.getElementById('timeBadge');
  const logBadge    = document.getElementById('logBadge');
  const fileBadge   = document.getElementById('fileBadge');
  const entriesBadge= document.getElementById('entriesBadge');
  const servoBadge  = document.getElementById('servoBadge');
  const buzzerBadge = document.getElementById('buzzerBadge');
  const ackLog      = document.getElementById('ackLog');

  const btnArm = document.getElementById('btnArm');
  const btnDisarm = document.getElementById('btnDisarm');
  const btnResetTime = document.getElementById('btnResetTime');
  const btnLogOn = document.getElementById('btnLogOn');
  const btnLogOff = document.getElementById('btnLogOff');
  const btnNewFile = document.getElementById('btnNewFile');
  const btnFireServo = document.getElementById('btnFireServo');
  const servoAngle = document.getElementById('servoAngle');
  const btnSetAngle = document.getElementById('btnSetAngle');
  const btnBuzzerOn = document.getElementById('btnBuzzerOn');
  const btnBuzzerOff = document.getElementById('btnBuzzerOff');

  /* ===== Serial plumbing ===== */
  let port, reader, writer, decoder, lineStream, inputDone;
  let linesShown = 0;
  const MAX_RAW_CHARS = 50000;

  // Telemetry header (must match firmware)
  const defaultHeaders = [
    "TimeSeconds",
    "AccelerationX_mps2","AccelerationY_mps2","AccelerationZ_mps2","AccelerationMagnitude_mps2","GForce_g",
    "GyroX_dps","GyroY_dps","GyroZ_dps","IMUTemperature_C",
    "Pressure_Pa","BMPTemperature_C","Altitude_m","VerticalSpeed_mps","MaxAltitude_m",
    "GPSAltitude_m","Latitude_deg","Longitude_deg","SpeedOverGround_mps","Course_deg","HDOP","Satellites","GPSDateTime_UTC",
    "Voltage_V","BatteryPercent","FreeHeap_bytes",
    "Status","PacketCount","ServoAngle_deg","BuzzerOn",
    "SDEnabled","SDEntries","SDFile"
  ];
  const canonicalSet = new Set(defaultHeaders);

  let headers = [...defaultHeaders];
  let valueCells = {};
  let lastVals = [];
  buildKVTable(headers);

  function buildKVTable(hs){
    kvBody.innerHTML = ''; valueCells = {};
    hs.forEach(h=>{
      const tr=document.createElement('tr');
      const k=document.createElement('td'); const v=document.createElement('td');
      k.textContent=h; v.textContent='â€”'; tr.appendChild(k); tr.appendChild(v); kvBody.appendChild(tr);
      valueCells[h]=v;
    });
  }
  function updateKV(values){
    lastVals = values.slice();
    while(values.length < headers.length) values.push('');
    headers.forEach((h,i)=>{ if(valueCells[h]) valueCells[h].textContent = (values[i] ?? '').trim(); });
    updateDashboard(); // refresh tiles/badges
  }

  function get(h){ const idx=headers.indexOf(h); return idx>=0 ? lastVals[idx] : ''; }
  function getNum(h){ const v=get(h); const n=parseFloat(v); return isFinite(n)?n:NaN; }

  /* ===== UI helpers ===== */
  function setOnline(on){ dot.classList.toggle('online', on); }
  function enableControls(on){
    [btnArm,btnDisarm,btnResetTime,btnLogOn,btnLogOff,btnNewFile,
     btnFireServo,btnSetAngle,btnBuzzerOn,btnBuzzerOff]
     .forEach(el => el.disabled = !on);
  }
  function appendRaw(t){
    rawDiv.textContent += t;
    if (rawDiv.textContent.length > MAX_RAW_CHARS)
      rawDiv.textContent = rawDiv.textContent.slice(-Math.floor(MAX_RAW_CHARS*.9));
    rawDiv.scrollTop = rawDiv.scrollHeight;
  }
  function badge(el, txt, cls){
    el.textContent = txt;
    el.classList.remove('good','bad','warn');
    if (cls) el.classList.add(cls);
  }
  function addAck(kind,msg){
    const line = document.createElement('div');
    const ts = new Date().toLocaleTimeString();
    line.textContent = `[${ts}] ${kind}: ${msg}`;
    line.style.color = (kind==="ACK") ? "#aef8e1" : "#ffd0db";
    ackLog.appendChild(line);
    ackLog.scrollTop = ackLog.scrollHeight;
  }

  /* ===== Map ===== */
  const map = L.map('map',{zoomControl:true}).setView([0,0],2);
  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',{maxZoom:19,attribution:'Â© OpenStreetMap'}).addTo(map);
  let marker=null, path=L.polyline([], {weight:3, opacity:.9, color:"#30a5ff"}).addTo(map), firstFix=false;
  function invalidateMap(){ try{ map.invalidateSize(); }catch(e){} }
  window.addEventListener('resize', invalidateMap);

  function validLatLon(lat,lon){ return isFinite(lat)&&isFinite(lon)&&lat>=-90&&lat<=90&&lon>=-180&&lon<=180 && !(lat===0&&lon===0); }
  function updateMapFromValues(vals){
    const li=headers.indexOf("Latitude_deg");  const lat=parseFloat(vals[(li>=0)?li:16]);
    const lo=headers.indexOf("Longitude_deg"); const lon=parseFloat(vals[(lo>=0)?lo:17]);
    const si=headers.indexOf("Satellites");    const sats=parseInt(vals[(si>=0)?si:21]||'0',10);
    if(validLatLon(lat,lon)){
      badge(fixPill, `${lat.toFixed(6)}, ${lon.toFixed(6)} (sats:${isFinite(sats)?sats:'?'})`, "good");
      const ll=[lat,lon];
      if(!marker){ marker=L.marker(ll).addTo(map).bindPopup('Receiver'); } else { marker.setLatLng(ll); }
      path.addLatLng(ll); if(!firstFix){ firstFix=true; map.setView(ll,16); }
      invalidateMap();
    } else {
      badge(fixPill, `no fix`, "warn");
    }
  }

  /* ===== Dashboard from latest values ===== */
  function updateDashboard(){
    const alt  = getNum("Altitude_m");         t_alt.textContent  = isFinite(alt)? alt.toFixed(1)+" m":"â€”";
    const vspd = getNum("VerticalSpeed_mps");  t_vspd.textContent = isFinite(vspd)? vspd.toFixed(2)+" m/s":"â€”";
    const sog  = getNum("SpeedOverGround_mps");t_sog.textContent  = isFinite(sog)? sog.toFixed(2)+" m/s":"â€”";
    const sats = parseInt(get("Satellites")||"0",10); t_sats.textContent = isFinite(sats)? String(sats) : "â€”";
    const hdop = getNum("HDOP");               t_hdop.textContent = isFinite(hdop)? hdop.toFixed(2):"â€”";
    const batt = getNum("BatteryPercent");     t_batt.textContent = isFinite(batt)? batt.toFixed(0)+"% ("+ (getNum("Voltage_V")||0).toFixed(2)+"V )" : "â€”";
    const pkt  = get("PacketCount");           t_pkt.textContent  = pkt || "â€”";

    const status = (get("Status")||"").toUpperCase();
    if (status==="ARMED")      badge(statusBadge, "Armed", "good");
    else if (status==="FIRED") badge(statusBadge, "Fired", "bad");
    else if (status==="DISARMED") badge(statusBadge, "Disarmed", "warn");
    else badge(statusBadge, get("Status")||"â€”");

    const tsec = getNum("TimeSeconds");
    badge(timeBadge, isFinite(tsec)? `t = ${tsec.toFixed(0)} s` : "t = â€”", null);

    const sdOn = get("SDEnabled")==="1";
    badge(logBadge, sdOn? "ON" : "OFF", sdOn? "good":"warn");
    badge(entriesBadge, get("SDEntries")||"0", null);
    const file = get("SDFile")||"â€”";
    badge(fileBadge, (file.length>18? file.slice(0,18)+"â€¦":file), null);

    const ang = getNum("ServoAngle_deg");
    badge(servoBadge, isFinite(ang)? `angle ${ang.toFixed(0)}Â°` : "angle â€”Â°", null);

    const buzz = get("BuzzerOn")==="1";
    badge(buzzerBadge, buzz? "ON":"OFF", buzz? "good":"warn");
  }

  /* ===== CSV & Header handling ===== */
  function parseCSV(line){ return line.split(',').map(s => s.trim()); }
  function isCanonicalHeader(line){
    const hs = parseCSV(line);
    const matches = hs.filter(h => canonicalSet.has(h)).length;
    return matches >= 6;
  }

  /* ===== Buffered line reader ===== */
  class LineBreakTransformer {
    constructor(){ this.container=''; }
    transform(chunk, controller){
      this.container += chunk;
      const lines = this.container.split(/\r\n|[\r\n]/);
      this.container = lines.pop();
      for(const line of lines) controller.enqueue(line);
    }
    flush(controller){ if(this.container) controller.enqueue(this.container); }
  }

  /* ===== Serial connect / write / disconnect ===== */
  async function connect(){
    if(!('serial' in navigator)){ alert('Web Serial not supported. Use Chrome/Edge over HTTPS.'); return; }
    try{
      const chosen = await navigator.serial.requestPort({});
      await chosen.open({ baudRate: parseInt(baudSel.value,10) });
      port = chosen;

      // Reader
      decoder = new TextDecoderStream();
      inputDone = port.readable.pipeTo(decoder.writable);
      lineStream = decoder.readable.pipeThrough(new TransformStream(new LineBreakTransformer()));
      reader = lineStream.getReader();

      // Writer
      const encoder = new TextEncoderStream();
      encoder.readable.pipeTo(port.writable);
      writer = encoder.writable.getWriter();

      connectBtn.disabled = true; disconnectBtn.disabled = false; enableControls(true); setOnline(true);
      linesShown=0; lineCountEl.textContent='';
      setTimeout(() => map.invalidateSize(), 200); // ensure correct map width after connect

      while(true){
        const {value, done} = await reader.read();
        if(done) break;
        if(value!=null){
          if (value.startsWith('#ACK,')){ addAck("ACK", value.substring(5)); continue; }
          if (value.startsWith('#ERR,')){ addAck("ERR", value.substring(5)); continue; }

          rawDiv.textContent += value+'\n';
          if (rawDiv.textContent.length > 50000)
            rawDiv.textContent = rawDiv.textContent.slice(-45000);
          rawDiv.scrollTop = rawDiv.scrollHeight;

          if (isCanonicalHeader(value)) { headers = parseCSV(value); buildKVTable(headers); continue; }
          const vals = parseCSV(value);
          if(vals.length===0) continue;

          updateKV(vals);
          updateMapFromValues(vals);

          linesShown++; lineCountEl.textContent = `Lines: ${linesShown}`;
        }
      }
    } catch(e){ console.error(e); }
    finally { await disconnect(); }
  }

  async function sendLine(s){
    if (!writer) return;
    try { await writer.write(s + "\n"); } catch(e){ console.error(e); }
  }

  async function disconnect(){
    try{
      enableControls(false);
      if (writer){ try{ await writer.close(); }catch{} writer=null; }
      if (reader){ await reader.cancel().catch(()=>{}); reader.releaseLock(); reader=null; }
      if (inputDone){ await inputDone.catch(()=>{}); inputDone=null; }
      if (port){ await port.close().catch(()=>{}); port=null; }
    } finally {
      connectBtn.disabled=false; disconnectBtn.disabled=true; setOnline(false);
    }
  }

  /* ===== Wire buttons ===== */
  document.getElementById('btnArm').addEventListener('click',       ()=> sendLine("CMD:ARM"));
  document.getElementById('btnDisarm').addEventListener('click',    ()=> sendLine("CMD:DISARM"));
  document.getElementById('btnResetTime').addEventListener('click', ()=> sendLine("CMD:RESET_TIME"));
  document.getElementById('btnLogOn').addEventListener('click',     ()=> sendLine("CMD:LOG_ON"));
  document.getElementById('btnLogOff').addEventListener('click',    ()=> sendLine("CMD:LOG_OFF"));
  document.getElementById('btnNewFile').addEventListener('click',   ()=> sendLine("CMD:NEW_FILE"));
  document.getElementById('btnFireServo').addEventListener('click', ()=> sendLine("CMD:FIRE_SERVO"));
  document.getElementById('btnSetAngle').addEventListener('click',  ()=>{
    const a = Math.max(0, Math.min(180, parseInt(document.getElementById('servoAngle').value||"90",10)));
    sendLine("CMD:SET_SERVO:" + a);
  });
  document.getElementById('btnBuzzerOn').addEventListener('click',  ()=> sendLine("CMD:BUZZER_ON"));
  document.getElementById('btnBuzzerOff').addEventListener('click', ()=> sendLine("CMD:BUZZER_OFF"));

  connectBtn.addEventListener('click', connect);
  disconnectBtn.addEventListener('click', disconnect);
})();
</script>
</body>
</html>
 
