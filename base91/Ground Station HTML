<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>CanSat Telemetry Dashboard</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      background: #111216;
      color: #eee;
      margin: 0;
      padding: 2em;
    }

    h1 {
      text-align: center;
      font-size: 2.4em;
      color: #42aaff;
      font-family: 'Orbitron', sans-serif;
      letter-spacing: 1px;
    }

    #container {
      display: flex;
      gap: 2em;
      flex-wrap: wrap;
      justify-content: center;
    }

    #left, #right {
      flex: 1 1 400px;
      background: #1e1f26;
      border-radius: 12px;
      padding: 1em;
      box-shadow: 0 0 10px rgba(66, 170, 255, 0.1);
    }

    button {
      font-size: 1em;
      padding: 0.6em 1.4em;
      margin: 0.5em 0.5em 1em 0;
      background: #42aaff;
      color: #fff;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      transition: background 0.2s, transform 0.1s;
    }

    button:hover {
      background: #2d8cd8;
    }

    button:active {
      transform: scale(0.98);
    }

    table {
      width: 100%;
      border-collapse: collapse;
      font-size: 1em;
      margin-top: 1em;
    }

    th, td {
      border: 1px solid #333;
      padding: 10px;
      text-align: center;
      background: #2a2d36;
      color: #e0e6ed;
    }

    th {
      background: #37414f;
      color: #42aaff;
      font-weight: 600;
    }

    #stream {
      background: #0d0d0d;
      color: #33ff99;
      font-family: monospace;
      font-size: 0.9em;
      height: 400px;
      overflow-y: auto;
      padding: 1em;
      border-radius: 8px;
      white-space: pre-line;
      border: 1px solid #333;
    }

    h2 {
      color: #42aaff;
      font-size: 1.3em;
      font-family: 'Orbitron', sans-serif;
      margin-bottom: 0.5em;
    }

    .config {
      text-align: center;
      margin-top: 1em;
      color: #ccc;
    }

    .config input {
      width: 4em;
      font-size: 1em;
      text-align: center;
      margin: 0 0.5em;
    }

    .config label {
      margin-right: 1em;
    }
  </style>
</head>
<body>

  <h1>CanSat Telemetry Dashboard</h1>
  <div style="text-align:center;">
    <button onclick="showInstructions()">Instructions</button>
    <button onclick="connectSerial()">Connect to CanSat</button>
    <button onclick="downloadExcel()">Export Data</button>
  </div>

  <div class="config">
    <label>Latitude Prefix: <input type="number" id="latPrefix" value="-37"></label>
    <label>Longitude Prefix: <input type="number" id="lonPrefix" value="175"></label>
  </div>

  <div id="container">
    <div id="left">
      <table>
        <thead>
          <tr>
            <th>Parameter</th>
            <th>Raw Value</th>
            <th>Interpreted</th>
          </tr>
        </thead>
        <tbody id="telemetry">
          <tr><td colspan="3">Waiting for data...</td></tr>
        </tbody>
      </table>
    </div>

    <div id="right">
      <h2>Parsed Data Stream</h2>
      <div id="stream">[ Waiting for connection... ]</div>
    </div>
  </div>

<script>
let port, reader;
let startTime = null;
let buffer = "";
const parsedDataLog = [];

async function connectSerial() {
  try {
    port = await navigator.serial.requestPort();
    await port.open({ baudRate: 9600 });

    const decoder = new TextDecoderStream();
    port.readable.pipeTo(decoder.writable);
    reader = decoder.readable.getReader();

    readLoop();
  } catch (err) {
    alert("Serial connection failed: " + err);
  }
}

function decodeBase91(str) {
  let val = 0;
  for (let i = 0; i < str.length; i++) {
    val = val * 91 + (str.charCodeAt(i) - 33);
  }
  return val;
}

function decodeSystemStatus(code) {
  const val = code.charCodeAt(0) - 33;
  const sd = val >= 36 ? "FAIL" : "OK";
  const voltageIndex = Math.floor((val % 36) / 3);
  const voltage = (4.2 - voltageIndex * 0.1).toFixed(1) + " V";
  const statusMap = ["Safe", "Armed", "Fired"];
  const mission = statusMap[val % 3] || "Unknown";
  return { sd, voltage, mission };
}

async function readLoop() {
  const telemetry = document.getElementById("telemetry");
  const streamBox = document.getElementById("stream");

  while (true) {
    const { value, done } = await reader.read();
    if (done) break;

    buffer += value;
    let newlineIndex;
    while ((newlineIndex = buffer.indexOf("\n")) >= 0) {
      const line = buffer.slice(0, newlineIndex).trim();
      buffer = buffer.slice(newlineIndex + 1);

      if (!startTime) startTime = performance.now();
      const now = performance.now();
      const elapsed = ((now - startTime) / 1000).toFixed(1);
      const timestamp = new Date().toLocaleTimeString();

      if (line.length === 14) {
        const tx = decodeBase91(line.slice(0, 2));
        const alt = decodeBase91(line.slice(2, 4));
        const statusChar = line.charAt(4);
        const lat = decodeBase91(line.slice(5, 9));
        const lon = decodeBase91(line.slice(9, 13));
        const checksum = line.charAt(13);

        const calcChecksum = String.fromCharCode(33 + [...line.slice(0, 13)].reduce((a, c) => a + c.charCodeAt(0), 0) % 91);
        const checksumValid = checksum === calcChecksum ? "✅" : "❌";

        const { sd, voltage, mission } = decodeSystemStatus(statusChar);
        const latPrefix = document.getElementById("latPrefix").value || "-37";
        const lonPrefix = document.getElementById("lonPrefix").value || "175";
        const fullLat = `${latPrefix}.${lat.toString().padStart(6, "0")}`;
        const fullLon = `${lonPrefix}.${lon.toString().padStart(6, "0")}`;

        telemetry.innerHTML = `
          <tr><td>Transmission ID</td><td>${line.slice(0,2)}</td><td>${tx}</td></tr>
          <tr><td>Altitude (m)</td><td>${line.slice(2,4)}</td><td>${alt}</td></tr>
          <tr><td>Status</td><td>${statusChar}</td><td>${mission}</td></tr>
          <tr><td>SD Card</td><td>${statusChar}</td><td>${sd}</td></tr>
          <tr><td>Voltage</td><td>${statusChar}</td><td>${voltage}</td></tr>
          <tr><td>Latitude</td><td>${line.slice(5,9)}</td><td>${fullLat}</td></tr>
          <tr><td>Longitude</td><td>${line.slice(9,13)}</td><td>${fullLon}</td></tr>
          <tr><td>Checksum</td><td>${checksum}</td><td>${checksumValid}</td></tr>
        `;

        parsedDataLog.push({
          Time: timestamp,
          TX_ID: tx,
          Altitude: alt,
          Status: mission,
          SD_Card: sd,
          Voltage: voltage,
          Latitude: fullLat,
          Longitude: fullLon,
          Checksum: checksumValid
        });

        streamBox.innerHTML = `[${timestamp} | +${elapsed}s] ${line} (${checksumValid})\n` + streamBox.innerHTML;
        streamBox.scrollTop = 0;
      }
    }
  }
}

function downloadExcel() {
  if (parsedDataLog.length === 0) {
    alert("No data to export yet.");
    return;
  }
  const worksheet = XLSX.utils.json_to_sheet(parsedDataLog);
  const workbook = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(workbook, worksheet, "Parsed Telemetry");
  XLSX.writeFile(workbook, "parsed_telemetry_data.xlsx");
}

function showInstructions() {
  alert(`INSTRUCTIONS:

1. Click "Connect to CanSat" to start the serial connection.
2. Incoming format: 14 Base91 characters:
   - 2 chars: Transmission ID
   - 2 chars: Altitude (m)
   - 1 char: Combined status (SD + Voltage + Mission)
   - 4 chars: Latitude (6 dp)
   - 4 chars: Longitude (6 dp)
   - 1 char: Checksum (Base91 mod of all previous)
3. Dashboard decodes and displays each field.
4. Adjust Lat/Lon prefixes for your location.`);
}
</script>
</body>
</html>
