<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>CanSat Telemetry Dashboard</title>
  <style>
    body {
      font-family: Helvetica, sans-serif;
      background: #f5f5f5;
      margin: 0;
      padding: 2em;
    }

    h1 {
      text-align: center;
      margin-bottom: 1em;
    }

    #container {
      display: flex;
      gap: 2em;
      align-items: flex-start;
    }

    #left, #right {
      flex: 1;
    }

    button {
      font-size: 1.2em;
      padding: 0.5em 1.5em;
      margin-bottom: 1em;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      font-size: 1.1em;
      margin-top: 1em;
    }

    th, td {
      border: 1px solid #aaa;
      padding: 10px;
      text-align: center;
      background: #fff;
    }

    th {
      background: #ddd;
    }

    #stream {
      background: #000;
      color: #0f0;
      font-family: monospace;
      font-size: 1em;
      height: 400px;
      overflow-y: auto;
      padding: 1em;
      border-radius: 6px;
      white-space: pre-line;
    }
  </style>
</head>
<body>

  <h1>CanSat Telemetry Dashboard</h1>
  <button onclick="showInstructions()">Instructions</button>
  <button onclick="connectSerial()">Connect to COM Port</button>

  <div id="container">
    <div id="left">
      <table>
        <thead>
          <tr>
            <th>Parameter</th>
            <th>Raw Value</th>
            <th>Interpreted</th>
          </tr>
        </thead>
        <tbody id="telemetry">
          <tr><td colspan="3">Waiting for data...</td></tr>
        </tbody>
      </table>
    </div>

    <div id="right">
      <h2>Raw Data Stream</h2>
      <div id="stream">[ Waiting for connection... ]</div>
    </div>
  </div>

  <script>
    let port, reader;
    let startTime = null;
    let buffer = "";

    async function connectSerial() {
      try {
        port = await navigator.serial.requestPort();
        await port.open({ baudRate: 9600 });

        const decoder = new TextDecoderStream();
        port.readable.pipeTo(decoder.writable);
        reader = decoder.readable.getReader();

        readLoop();
      } catch (err) {
        alert("Serial connection failed: " + err);
      }
    }

    async function readLoop() {
      const telemetry = document.getElementById("telemetry");
      const streamBox = document.getElementById("stream");

      while (true) {
        const { value, done } = await reader.read();
        if (done) break;

        buffer += value;

        let newlineIndex;
        while ((newlineIndex = buffer.indexOf("\n")) >= 0) {
          const line = buffer.slice(0, newlineIndex).trim();
          buffer = buffer.slice(newlineIndex + 1);

          if (!startTime) startTime = performance.now();
          const now = performance.now();
          const elapsed = ((now - startTime) / 1000).toFixed(1);
          const timestamp = new Date().toLocaleTimeString();

          streamBox.innerHTML += `[${timestamp} | +${elapsed}s] ${line}\n`;
          streamBox.scrollTop = streamBox.scrollHeight;

          const match = line.match(/^(-?[\d.]+)([AB])([\d]{6})([A-G])([\d]{6})$/);
          if (match) {
            const [, altitude, sdStatus, latDec, hdop, lonDec] = match;
            const hdopRanges = {
              A: "0–1", B: "1–2", C: "2–3", D: "3–4", E: "4–5", F: "5–6", G: "6+"
            };
            telemetry.innerHTML = `
              <tr><td>Altitude (m)</td><td>${altitude}</td><td>${altitude}</td></tr>
              <tr><td>SD Card Status</td><td>${sdStatus}</td><td>${sdStatus === 'A' ? 'OK' : 'FAIL'}</td></tr>
              <tr><td>Latitude (.XXXXXX)</td><td>${latDec}</td><td>0.${latDec}</td></tr>
              <tr><td>HDOP Grade</td><td>${hdop}</td><td>${hdop} (${hdopRanges[hdop]} range)</td></tr>
              <tr><td>Longitude (.XXXXXX)</td><td>${lonDec}</td><td>0.${lonDec}</td></tr>`;
          }
        }
      }
    }

    function showInstructions() {
      alert(`INSTRUCTIONS:\n\nThis dashboard connects to a CanSat running simplified telemetry.\n\nEach serial packet is a single line with the following pattern:\n\n<BMP Altitude><SD status><Latitude decimal digits><HDOP grade><Longitude decimal digits>\n\nExample: 154.2A654321C987654\n\nParsed as:\n- BMP Altitude: 154.2\n- SD status: A = OK, B = FAIL\n- Latitude: .654321\n- HDOP: C\n- Longitude: .987654`);
    }
  </script>
</body>
</html>
