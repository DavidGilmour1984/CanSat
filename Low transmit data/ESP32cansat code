#include <Wire.h>
#include <Adafruit_BMP280.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <TinyGPS++.h>
#include <SD.h>
#include <SPI.h>

#define rxGPS 16
#define txGPS 17
#define PIN_SPI_CS 5
#define VOLTAGE_PIN 36
#define BUZZER_PIN 27
#define SERVO_PIN 4

#define SERVO_PWM_CHANNEL 0
#define SERVO_FREQ 50
#define SERVO_RES 16

Adafruit_BMP280 bmp;
Adafruit_MPU6050 mpu;
HardwareSerial GPSSerial(1);
TinyGPSPlus gps;
File myFile;
String filename;

float baseAltitude = 0;
float maxBMPAltitude = -10000.0;
unsigned long startTime;
unsigned long lastSDWrite = 0;
unsigned long lastSerialPrint = 0;
bool deploymentTriggered = false;
bool hasPassed300m = false;

float lastValidLatitude = 0.0;
float lastValidLongitude = 0.0;
float lastValidGPSAltitude = NAN;
bool gpsDataAvailable = false;
bool lastWriteSuccessful = true;

char voltageToGrade(float v) {
  int index = round((4.2 - v) * 10);
  if (index < 0) index = 0;
  if (index > 15) return 'Q';
  return 'A' + index;
}

int angleToDuty(int angle) {
  int dutyMin = 3277;
  int dutyMax = 6553;
  return map(angle, 0, 180, dutyMin, dutyMax);
}

void setup() {
  Serial.begin(9600);
  while (!Serial) delay(100);

  pinMode(BUZZER_PIN, OUTPUT);
  digitalWrite(BUZZER_PIN, LOW);

  ledcSetup(SERVO_PWM_CHANNEL, SERVO_FREQ, SERVO_RES);
  ledcAttachPin(SERVO_PIN, SERVO_PWM_CHANNEL);
  ledcWrite(SERVO_PWM_CHANNEL, angleToDuty(0));

  if (!bmp.begin(0x76)) {
    Serial.println("BMP280 not found!");
    while (1);
  }
  baseAltitude = bmp.readAltitude(1013.25);

  GPSSerial.begin(9600, SERIAL_8N1, rxGPS, txGPS);

  if (!mpu.begin()) {
    Serial.println("MPU6050 not found!");
    while (1);
  }
  mpu.setAccelerometerRange(MPU6050_RANGE_16_G);

  if (!SD.begin(PIN_SPI_CS)) {
    Serial.println("SD Card init failed!");
  } else {
    int fileIndex = 1;
    do {
      filename = "/data_" + String(fileIndex) + ".csv";
      fileIndex++;
    } while (SD.exists(filename));
    myFile = SD.open(filename, FILE_WRITE);
    if (myFile) {
      myFile.println("Time (s), AccZ (m/sÂ²), Alt (m), MaxAlt (m), GPS Alt, Lat, Lon, Voltage, Status");
      myFile.close();
    }
  }

  startTime = millis();
}

void loop() {
  unsigned long currentMillis = millis();
  float elapsed = (currentMillis - startTime) / 1000.0;

  while (GPSSerial.available()) gps.encode(GPSSerial.read());
  if (gps.location.isValid()) {
    lastValidLatitude = gps.location.lat();
    lastValidLongitude = gps.location.lng();
    if (gps.altitude.isValid()) lastValidGPSAltitude = gps.altitude.meters();
    gpsDataAvailable = true;
  }

  float bmpAltitude = bmp.readAltitude(1013.25) - baseAltitude;
  if (bmpAltitude > maxBMPAltitude) maxBMPAltitude = bmpAltitude;

  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);
  float accelerationZ = a.acceleration.z;

  float voltage = analogRead(VOLTAGE_PIN) * (3.3 / 4095.0) * 1.44;

  String status = "Armed";
  if (elapsed < 60) status = "Safe";
  else if (!deploymentTriggered) {
    if (bmpAltitude >= 300) hasPassed300m = true;
    if (hasPassed300m && bmpAltitude <= 150) {
      ledcWrite(SERVO_PWM_CHANNEL, angleToDuty(90));
      digitalWrite(BUZZER_PIN, HIGH);
      deploymentTriggered = true;
      status = "Fired";
    }
  } else {
    status = "Fired";
  }

  if (currentMillis - lastSDWrite >= 100) {
    lastSDWrite = currentMillis;
    String csv = String(elapsed, 1) + ", " + String(accelerationZ, 1) + ", " +
                 String(bmpAltitude, 1) + ", " + String(maxBMPAltitude, 1) + ", " +
                 (isnan(lastValidGPSAltitude) ? "0" : String(lastValidGPSAltitude)) + ", " +
                 (gpsDataAvailable ? String(lastValidLatitude, 6) + ", " + String(lastValidLongitude, 6) : "0,0") + ", " +
                 String(voltage, 1) + ", " + status;

    myFile = SD.open(filename, FILE_APPEND);
    if (myFile) {
      myFile.println(csv + ", OK");
      myFile.close();
      lastWriteSuccessful = true;
    } else {
      lastWriteSuccessful = false;
    }
  }

  if (currentMillis - lastSerialPrint >= 2000) {
    lastSerialPrint = currentMillis;

    char statusChar = (!lastWriteSuccessful ? 'X' : (status == "Safe" ? 'S' : (status == "Fired" ? 'F' : 'A')));
    char voltageChar = voltageToGrade(voltage);

    String latStr = String(fabs(lastValidLatitude), 6);
    String lonStr = String(fabs(lastValidLongitude), 6);
    String latDec = latStr.substring(latStr.indexOf('.') + 1);
    String lonDec = lonStr.substring(lonStr.indexOf('.') + 1);

    String telemetry = String((int)round(bmpAltitude)) + statusChar + latDec + voltageChar + lonDec;
    Serial.println(telemetry);
  }
}
