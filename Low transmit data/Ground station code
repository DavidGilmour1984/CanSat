<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>CanSat Telemetry Dashboard</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      background: #111216;
      color: #eee;
      margin: 0;
      padding: 2em;
    }

    h1 {
      text-align: center;
      font-size: 2.4em;
      color: #42aaff;
      font-family: 'Orbitron', sans-serif;
      letter-spacing: 1px;
    }

    #container {
      display: flex;
      gap: 2em;
      flex-wrap: wrap;
      justify-content: center;
    }

    #left, #right {
      flex: 1 1 400px;
      background: #1e1f26;
      border-radius: 12px;
      padding: 1em;
      box-shadow: 0 0 10px rgba(66, 170, 255, 0.1);
    }

    button {
      font-size: 1em;
      padding: 0.6em 1.4em;
      margin: 0.5em 0.5em 1em 0;
      background: #42aaff;
      color: #fff;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      transition: background 0.2s, transform 0.1s;
    }

    button:hover {
      background: #2d8cd8;
    }

    button:active {
      transform: scale(0.98);
    }

    table {
      width: 100%;
      border-collapse: collapse;
      font-size: 1em;
      margin-top: 1em;
    }

    th, td {
      border: 1px solid #333;
      padding: 10px;
      text-align: center;
      background: #2a2d36;
      color: #e0e6ed;
    }

    th {
      background: #37414f;
      color: #42aaff;
      font-weight: 600;
    }

    #stream {
      background: #0d0d0d;
      color: #33ff99;
      font-family: monospace;
      font-size: 0.9em;
      height: 400px;
      overflow-y: auto;
      padding: 1em;
      border-radius: 8px;
      white-space: pre-line;
      border: 1px solid #333;
    }

    h2 {
      color: #42aaff;
      font-size: 1.3em;
      font-family: 'Orbitron', sans-serif;
      margin-bottom: 0.5em;
    }
  </style>
</head>
<body>

  <h1>CanSat Telemetry Dashboard</h1>
  <div style="text-align:center;">
    <button onclick="showInstructions()">Instructions</button>
    <button onclick="connectSerial()">Connect to CanSat</button>
    <button onclick="downloadExcel()">Export Data</button>
  </div>

  <div id="container">
    <div id="left">
      <table>
        <thead>
          <tr>
            <th>Parameter</th>
            <th>Raw Value</th>
            <th>Interpreted</th>
          </tr>
        </thead>
        <tbody id="telemetry">
          <tr><td colspan="3">Waiting for data...</td></tr>
        </tbody>
      </table>
    </div>

    <div id="right">
      <h2>Parsed Data Stream</h2>
      <div id="stream">[ Waiting for connection... ]</div>
    </div>
  </div>

  <script>
    let port, reader;
    let startTime = null;
    let buffer = "";
    const parsedDataLog = [];

    async function connectSerial() {
      try {
        port = await navigator.serial.requestPort();
        await port.open({ baudRate: 9600 });

        const decoder = new TextDecoderStream();
        port.readable.pipeTo(decoder.writable);
        reader = decoder.readable.getReader();

        readLoop();
      } catch (err) {
        alert("Serial connection failed: " + err);
      }
    }

    async function readLoop() {
      const telemetry = document.getElementById("telemetry");
      const streamBox = document.getElementById("stream");

      while (true) {
        const { value, done } = await reader.read();
        if (done) break;

        buffer += value;

        let newlineIndex;
        while ((newlineIndex = buffer.indexOf("\n")) >= 0) {
          const line = buffer.slice(0, newlineIndex).trim();
          buffer = buffer.slice(newlineIndex + 1);

          if (!startTime) startTime = performance.now();
          const now = performance.now();
          const elapsed = ((now - startTime) / 1000).toFixed(1);
          const timestamp = new Date().toLocaleTimeString();

          const match = line.match(/^(-?[\d.]+)([AB])([\d]{6})([A-G])([\d]{6})$/);
          if (match) {
            const [, altitude, sdStatus, latDec, hdop, lonDec] = match;
            const hdopRanges = {
              A: "0–1", B: "1–2", C: "2–3", D: "3–4", E: "4–5", F: "5–6", G: "6+"
            };

            // Log to telemetry table
            telemetry.innerHTML = `
              <tr><td>Altitude (m)</td><td>${altitude}</td><td>${altitude}</td></tr>
              <tr><td>SD Card Status</td><td>${sdStatus}</td><td>${sdStatus === 'A' ? 'OK' : 'FAIL'}</td></tr>
              <tr><td>Latitude (.XXXXXX)</td><td>${latDec}</td><td>0.${latDec}</td></tr>
              <tr><td>HDOP Grade</td><td>${hdop}</td><td>${hdop} (${hdopRanges[hdop]})</td></tr>
              <tr><td>Longitude (.XXXXXX)</td><td>${lonDec}</td><td>0.${lonDec}</td></tr>`;

            // Log parsed data to history
            parsedDataLog.push({
              Time: timestamp,
              Altitude_m: altitude,
              SD_Status: sdStatus === 'A' ? 'OK' : 'FAIL',
              Latitude: `0.${latDec}`,
              Longitude: `0.${lonDec}`,
              HDOP: `${hdop} (${hdopRanges[hdop]})`
            });

            // Add to stream
            streamBox.innerHTML += `[${timestamp} | +${elapsed}s] Alt:${altitude}m  SD:${sdStatus}  Lat:0.${latDec}  Lon:0.${lonDec}  HDOP:${hdop}\n`;
            streamBox.scrollTop = streamBox.scrollHeight;
          }
        }
      }
    }

    function downloadExcel() {
      if (parsedDataLog.length === 0) {
        alert("No data to export yet.");
        return;
      }

      const worksheet = XLSX.utils.json_to_sheet(parsedDataLog);
      const workbook = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(workbook, worksheet, "Parsed Telemetry");
      XLSX.writeFile(workbook, "parsed_telemetry_data.xlsx");
    }

    function showInstructions() {
      alert(`INSTRUCTIONS:\n\nConnect to the CanSat via serial and monitor live telemetry.\n\nExported Excel includes:\n- Timestamp\n- Altitude\n- SD status\n- Latitude\n- Longitude\n- HDOP range\n\nSerial format: <Altitude><SD><Lat><HDOP><Lon>\nExample: 154.2A654321C987654`);
    }
  </script>
</body>
</html>
